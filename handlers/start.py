import os
import json
from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from keyboards.config_keyboard import *

router = Router()

ADMIN_FILE = 'admin.json'


def load_config():
    if not os.path.exists(ADMIN_FILE):
        return {'admin': [], 'forum_chat_id': None}
    with open(ADMIN_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
        if 'forum_chat_id' not in data:
            data['forum_chat_id'] = None
        return data


def save_config(config):
    with open(ADMIN_FILE, 'w', encoding='utf-8') as file:
        json.dump(config, file, ensure_ascii=False, indent=2)


def load_admins():
    config = load_config()
    return config.get('admin', [])


def save_admins(admin_ids):
    config = load_config()
    config['admin'] = admin_ids
    save_config(config)


def parse_admin_ids(text):
    return [i.strip() for i in text.split(',') if i.strip().isdigit()]


class AdminStates(StatesGroup):
    waiting_for_admins = State()
    waiting_for_forum_chat_id = State()


@router.message(CommandStart())
async def start(message: Message, bot: Bot):
    config = load_config()
    if not config['admin'] and not config['forum_chat_id']:
        await message.answer(
            text="‚ö†Ô∏è –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —á–∞—Ç-—Ñ–æ—Ä—É–º –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
            reply_markup=full_config_keyboard)

    if not config.get('forum_chat_id'):
        await message.answer(
            "‚ö†Ô∏è –ß–∞—Ç-—Ñ–æ—Ä—É–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞",
            reply_markup=keyboard_only_for_add_themes
        )

    if message.from_user.id not in load_admins():
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")

    if message.from_user.id in parse_admin_ids(message.text):
        pass


class AdminStates(StatesGroup):
    waiting_for_admins = State()
    waiting_for_forum_chat_id = State()


@router.callback_query(F.data == 'add_admins')
async def add_admins_callback(callback_query: CallbackQuery, state: FSMContext):
    config = load_config()
    admins_exist = bool(config.get('admin'))
    admins = config.get('admin', [])

    await callback_query.answer()

    if admins_exist and str(callback_query.from_user.id) not in admins:
        await callback_query.message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    await state.set_state(AdminStates.waiting_for_admins)


@router.message(AdminStates.waiting_for_admins)
async def process_admins_input(message: Message, state: FSMContext):
    config = load_config()
    admin_ids = parse_admin_ids(message.text)

    if not admin_ids:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return

    config['admin'] = admin_ids
    save_config(config)
    await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n{', '.join(admin_ids)}")

    if not config.get('forum_chat_id'):
        await message.answer(
            "‚ö†Ô∏è –ß–∞—Ç-—Ñ–æ—Ä—É–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞",
            reply_markup=keyboard_only_for_add_themes
        )
    await state.clear()


@router.callback_query(F.data == 'add_themes')
async def set_forum_chat_callback(callback_query: CallbackQuery, state: FSMContext):
    config = load_config()
    admins = config.get('admin', [])

    await callback_query.answer()

    if str(callback_query.from_user.id) not in admins:
        await callback_query.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await callback_query.message.answer("üåê –í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞-—Ñ–æ—Ä—É–º–∞:")
    await state.set_state(AdminStates.waiting_for_forum_chat_id)


@router.message(AdminStates.waiting_for_forum_chat_id)
async def process_forum_chat_id(message: Message, state: FSMContext):
    config = load_config()
    chat_id = message.text.strip()

    try:
        chat = await message.bot.get_chat(chat_id)

        if not getattr(chat, "is_forum", False):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã.")
            return

        admins_list = await message.bot.get_chat_administrators(chat_id)
        bot_member = next((m for m in admins_list if m.user.id == message.bot.id), None)

        if not bot_member:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            return

        if not getattr(bot_member, "can_manage_topics", False):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏.")
            return

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞:\n{str(e)}")
        await message.answer("‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return

    config['forum_chat_id'] = chat_id
    save_config(config)
    await message.answer(f"‚úÖ –ß–∞—Ç-—Ñ–æ—Ä—É–º —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:\nID: {chat_id}")
    await state.clear()
